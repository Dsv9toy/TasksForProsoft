     1                                  ; my fisrt programm on accembler. Home Work 1.
     2                                  ; task: Модифицировать программу вывода HelloWorld:
     3                                  ; 1 - Реализация проверки возвращаемого значения системного вызова write
     4                                  ; 2 - Реализация вывода лог strace и генерация листинга (-l listing.lst)
     5                                  ; 3 - Результат работы программы вывести не в терминал, а в отдельный файл. Туда же стрейс и листинг 
     6                                  
     7                                  global _start                      ; делаем метку метку _start видимой извне
     8                                   
     9                                  
    10                                  
    11                                  section .data                      ; секция данных
    12 00000000 48656C6C6F20776F72-         message db  "Hello world!",10  ; строка для вывода на консоль
    12 00000009 6C64210A           
    13                                      length  equ $ - message
    14                                   
    15                                     ; Создали метку filename. db - define bytes. Далее наш файл который будет создаваться. Затем ,0 - это для системы чтоб она поняла где будет конец 
    16                                     ; записи названия нашего файла. Я так понял это работает с чем угодно. ,0 чисто показывает где следует остановиться.
    17 0000000D 6F75747075742E7478-         filename db "output.txt",0     ; имя файла для вывода 
    17 00000016 7400               
    18                                  
    19                                  
    20                                  
    21                                  section .text                      ; объявление секции кода
    22                                  
    23                                  ; Функция проверки результата syscall
    24                                  checkResult:
    25 00000000 4883F800                    cmp rax, 0                    ; проверяем успешность
    26 00000004 7C01                        jl errorHandler              ; если ошибка (отрицательное значение. То есть rax < 0)
    27 00000006 C3                          ret
    28                                  
    29                                  
    30                                  ; Для выхода с кодом ошибки
    31                                  errorHandler:
    32 00000007 48F7D8                      neg rax                       ; делаем код ошибки положительным
    33 0000000A 4889C7                      mov rdi, rax                  ; используем как код возврата
    34 0000000D B83C000000                  mov rax, 60                   ; код 60 соотвествует sys_exit
    35 00000012 0F05                        syscall
    36                                  
    37                                  
    38                                  
    39                                  _start:                            ; точка входа в программу
    40                                  
    41                                      ; Открываем наш будущий файл для записи
    42 00000014 B802000000                  mov rax, 2                     ; 2 - номер системного вызова open
    43 00000019 48BF-                       mov rdi, filename              ; имя файла (система найдет конец по 0 который был указан)
    43 0000001B [0D00000000000000] 
    44 00000023 BE41000000                  mov rsi, 0x41                  ; O_CREAT | O_WRONLY (флаги)
    45 00000028 BAA4010000                  mov rdx, 0o644                 ; устанавливаем права доступа для файла. Аналогично линуксу (rw-r--r--)
    46 0000002D 0F05                        syscall
    47                                      
    48                                      ; Проверим всё ли нормально открылось
    49 0000002F E8CCFFFFFF                  call checkResult              ; проверяем успешность открытия
    50 00000034 4889C3                      mov rbx, rax                   ; Сохраняем файловый дескриптор в RBX
    51                                  
    52                                  
    53                                      ; Задача вывести инф-ю в файл, вместо консоли. 
    54 00000037 B801000000                  mov rax, 1                     ; 1 - номер системного вызова функции write
    55 0000003C 4889DF                      mov rdi, rbx                   ; Файловый дескриптор из RBX
    56 0000003F 48BE-                       mov rsi, message               ; адрес строки для вывод
    56 00000041 [0000000000000000] 
    57 00000049 BA0D000000                  mov rdx, length                ; количество байтов
    58 0000004E 0F05                        syscall                        ; выполняем системный вызов write
    59                                   
    60                                      ; Опять же проверим успех записи.
    61 00000050 E8ABFFFFFF                  call checkResult              ; проверяем успешность записи
    62                                  
    63                                  
    64                                      ; Если всё нормально, то можем закрыть файл.
    65 00000055 B803000000                  mov rax, 3                     ; 3 - номер системного вызова close
    66 0000005A 4889DF                      mov rdi, rbx                   ; Файловый дескриптор из RBX
    67 0000005D 0F05                        syscall
    68                                   
    69                                   ; Ну и, оответсвенно, выходим из программы 
    70 0000005F B83C000000                  mov rax, 60                    ; 60 - номер системного вызова exit
    71 00000064 4831FF                      xor rdi, rdi                   ; код возврата 0
    72 00000067 0F05                        syscall                        ; выполняем системный вызов exit
