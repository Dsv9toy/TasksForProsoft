; my fisrt programm on accembler. Home Work 1.
; task: Модифицировать программу вывода HelloWorld:
; 1 - Реализация проверки возвращаемого значения системного вызова write
; 2 - Реализация вывода лог strace и генерация листинга (-l listing.lst)
; 3 - Результат работы программы вывести не в терминал, а в отдельный файл. Туда же стрейс и листинг 

global _start                      ; делаем метку метку _start видимой извне
 


section .data                      ; секция данных
    message db  "Hello world!",10  ; строка для вывода на консоль
    length  equ $ - message
 
   ; Создали метку filename. db - define bytes. Далее наш файл который будет создаваться. Затем ,0 - это для системы чтоб она поняла где будет конец 
   ; записи названия нашего файла. Я так понял это работает с чем угодно. ,0 чисто показывает где следует остановиться.
    filename db "output.txt",0     ; имя файла для вывода 



section .text                      ; объявление секции кода

; Функция проверки результата syscall
checkResult:
    cmp rax, 0                    ; проверяем успешность
    jl errorHandler              ; если ошибка (отрицательное значение. То есть rax < 0)
    ret


; Для выхода с кодом ошибки
errorHandler:
    neg rax                       ; делаем код ошибки положительным
    mov rdi, rax                  ; используем как код возврата
    mov rax, 60                   ; код 60 соотвествует sys_exit
    syscall



_start:                            ; точка входа в программу

    ; Открываем наш будущий файл для записи
    mov rax, 2                     ; 2 - номер системного вызова open
    mov rdi, filename              ; имя файла (система найдет конец по 0 который был указан)
    mov rsi, 0x41                  ; O_CREAT | O_WRONLY (флаги)
    mov rdx, 0o644                 ; устанавливаем права доступа для файла. Аналогично линуксу (rw-r--r--)
    syscall
    
    ; Проверим всё ли нормально открылось
    call checkResult              ; проверяем успешность открытия
    mov rbx, rax                   ; Сохраняем файловый дескриптор в RBX


    ; Задача вывести инф-ю в файл, вместо консоли. 
    mov rax, 1                     ; 1 - номер системного вызова функции write
    mov rdi, rbx                   ; Файловый дескриптор из RBX
    mov rsi, message               ; адрес строки для вывод
    mov rdx, length                ; количество байтов
    syscall                        ; выполняем системный вызов write
 
    ; Опять же проверим успех записи.
    call checkResult              ; проверяем успешность записи


    ; Если всё нормально, то можем закрыть файл.
    mov rax, 3                     ; 3 - номер системного вызова close
    mov rdi, rbx                   ; Файловый дескриптор из RBX
    syscall
 
 ; Ну и, оответсвенно, выходим из программы 
    mov rax, 60                    ; 60 - номер системного вызова exit
    xor rdi, rdi                   ; код возврата 0
    syscall                        ; выполняем системный вызов exit